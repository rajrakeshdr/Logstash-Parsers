input{
#stdin{}
#udp {
#	type => "syslog"
#	port => 5000
file {
        path => "/home/syslog_final/Citrixnet_2017*"
        type => ["file"]
        start_position => "beginning"
        } 
}
filter{
	mutate {
		gsub => ["message","  "," "]
		gsub => ["message","\"",""]
		gsub => ["message","%",""]
		}
	if [message] =~ "ICAEND" 
	{
		
		grok {
			match => ["message", "%{WORD} %{INT} %{TIME} %{DATA} %{DATE_US:icadate}: %{TIME:icatime} GMT %{SYSLOGHOST:servername} %{DATA:txncustomfield1} : %{DATA:domainname} %{DATA:eventdesc} %{POSINT:txncustomfield2} %{INT} : %{WORD} %{IP:ipaddress}:%{POSINT:txncustomfield3} - %{WORD} %{IP:txncustomfield4}:%{POSINT:destination_port} - %{WORD:txncustomfield5}:%{WORD} %{WORD:employeeid}:%{DATA} - %{WORD} %{DATE_US:START_DATE}:%{TIME:txncustomfield6} GMT - %{WORD} %{DATE_US:END_DATE}:%{TIME:txncustomfield7} GMT - %{WORD} %{TIME:txncustomfield8} - %{DATA} %{POSINT:txncustomfield9} - %{DATA} %{POSINT:txncustomfield10} - %{DATA} %{NUMBER:txncustomfield11} - %{DATA} %{NUMBER:txncustomfield12} - %{DATA:txncustomfield15} - %{DATA:txncustomfield16} - %{DATA} %{DATA:txncustomfield17}" ]
		    }
		  
		mutate {
		split => ["comp_ratio_send"," "]
                split => ["comp_ratio_recv"," "]
                add_field => ["compressed_ratio_send", "%{[comp_ratio_send][1]}"]
                add_field => ["compressed_ratio_recv", "%{[comp_ratio_recv][1]}"]
                        }
	}
       else if [message] =~ "ICASTART" 
	{
		grok {
                        match => ["message", "%{WORD} %{INT} %{TIME} %{DATA} %{DATE_US:icadate}: %{TIME:icatime} GMT %{SYSLOGHOST:servername} %{DATA:txncustomfield1} : %{DATA:domainname} %{DATA:eventdesc} %{POSINT:txncustomfield2} %{INT} : %{WORD} %{IP:ipaddress}:%{POSINT:txncustomfield3} - %{WORD} %{IP:txncustomfield4}:%{POSINT:destination_port} - %{WORD:txncustomfield5}:%{WORD} %{WORD:employeeid}:%{DATA} - %{DATA:txncustomfield9} - %{WORD} %{DATE_US:START_DATE}:%{TIME:txncustomfield6} GMT - %{DATA} %{DATA:txncustomfield7}" ]
                    }
	}
	date {
		match => ["date","MM/dd/YYYY"]
		target => "new_date"
	     }
	date_formatter {
		source => "new_date"
		pattern => "YYYY-MM-dd"
		target => "new_date"
		}
	mutate {
#		add_field => ["eventdate", "%{new_date} %{time}"]
		add_field => ["eventdate", "%{icadate} %{icatime}"]
		gsub => ["eventdate",".{4}$",""]
	       }
if "_grokparsefailure" in [tags] {
drop {}
}
}
output {
	 if [message] =~ "ICAEND" {
	csv {
		fields => ["eventdate","employeeid","ipaddress","servername","eventdesc","domainname","txncustomfield1","txncustomfield2","txncustomfield3","txncustomfield4","txncustomfield5","txncustomfield6","txncustomfield7","txncustomfield8","txncustomfield9","txncustomfield10","txncustomfield11","txncustomfield12","txncustomfield15","txncustomfield16","txncustomfield17"]
		path => "/opt/gra/activitylogmgr/logs/out/syslog/ica_end_%{+YYYY-MM-dd-HH}.csv"
	    }
				  }
	else if [message] =~ "ICASTART" {
	csv {
		fields => ["eventdate","employeeid","ipaddress","servername","eventdesc","domainname","txncustomfield1","txncustomfield2","txncustomfield3","txncustomfield4","txncustomfield5","txncustomfield6","txncustomfield7", "txncustomfield9"]
		path => "/opt/gra/activitylogmgr/logs/out/syslog/ica_start_%{+YYYY-MM-dd-HH}.csv"	
	    }
					}
#stdout {
#	codec => rubydebug
#	}
}

